<?php //-->
/**
 * This file is part of the Handlebars PHP Project.
 *
 * Copyright and license information can be found at LICENSE.txt
 * distributed with this package.
 */

namespace Handlebars;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:00.
 */
class HandlebarsTokenizerTest extends TestCase
{
  /**
   * @var HandlebarsTokenizer
   */
  protected $object;

   /**
   * @var string
   */
  protected $source;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp(): void
  {
    $this->source = file_get_contents(__DIR__.'/assets/tokenizer.html');
    $this->object = new HandlebarsTokenizer($this->source);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown(): void
  {
  }

  /**
   * @covers Handlebars\HandlebarsTokenizer::__construct
   */
  public function test__construct()
  {
    $actual = $this->object->__construct($this->source);

    $this->assertNull($actual);
  }

  /**
   * @covers Handlebars\HandlebarsTokenizer::setBars
   */
  public function testSetBars()
  {
    $actual = $this->object->setBars('{}');
    $this->assertInstanceOf(HandlebarsTokenizer::class, $actual);
  }

  /**
   * @covers Handlebars\HandlebarsTokenizer::tokenize
   * @covers Handlebars\HandlebarsTokenizer::addNode
   * @covers Handlebars\HandlebarsTokenizer::flushText
   * @covers Handlebars\HandlebarsTokenizer::findVariable
   */
  public function testTokenize()
  {
    $actual = $this->object->tokenize();
    $this->assertInstanceOf(HandlebarsTokenizer::class, $actual);

    $i = 0;

    //should we test for more?
    $tests = json_decode(__DIR__.'/assets/tokenizer.json', true);

    $unit = $this;

    $this->object->tokenize(function($node) use ($unit, $tests, &$i) {
      if(isset($tests[$i])) {
        $unit->assertEquals($tests[$i], $node['value']);
      }

      $i++;
    });
  }
}
